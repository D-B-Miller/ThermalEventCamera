#include <stdint.h>
#include <iostream>
#include <cstring>
#include <chrono>
#include <thread>
#include <future>
#include <math.h>
#include <stdlib.h>
#include <errno.h>
#include <iomanip>
#include <ctime>
#include <linux/if_link.h>
#include <string.h>
#include <algorithm>
#include <memory>
#include <unistd.h>
#include <math.h>
#include <atomic>
#include <mutex>
#include "headers/MLX90640_API.h"
#include "headers/MLX90640_I2C_Driver.h"
#include "threadsafequeue.h"

#ifndef __TEVENTCAMERA__
#define __TEVENTCAMERA__

// address of thermal camera on Pi
#define MLX_I2C_ADDR 0x33

#define IMAGE_SCALE 5

#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_NONE    "\x1b[30m"
#define ANSI_COLOR_RESET   "\x1b[0m"

#define FMT_STRING "\u2588\u2588"

// Valid frame rates are 1, 2, 4, 8, 16, 32 and 64
// The i2c baudrate is set to 1mhz to support these
#define FPS 16
#define FRAME_TIME_MICROS (1000000/FPS)

// Despite the framerate being ostensibly FPS hz
// The frame is often not ready in time
// This offset is added to the FRAME_TIME_MICROS
// to account for this.
#define OFFSET_MICROS 850

// structure for event data on each pixel
struct EventData{
	private:
		std::chrono::time_point<std::chrono::system_clock> ts; // timestamp the change was logged
	public:
		signed short sign = 0; // sign of change, +1 for positive, -1 for negative and 0 for no change
		int idx = 0; // array idx of change, currently 1D idx
		EventData(){}; // blank constructor, not time is not set
		// constructor passing idx and sign
		EventData(int ii,unsigned short sig){
			this->ts  = std::chrono::system_clock::now(); // set timestamp
			this->sign = sig; // set sign change
			this->idx = ii;// set index
		}
		// method to retrieve the timestamp of edit
		std::chrono::time_point<std::chrono::system_clock> time() const {return this->ts;};
};

// class for treating an MLX90640 thermal camera as an Event Camera
typedef bool (*CompareFunc)(uint16_t,uint16_t);
class ThermalEventCamera {
	public:
		signed short out[834] {0}; // output array of sign changes
		float emissivity = 1; // emissivity used in temperature conversions

		ThermalEventCamera(); // constructor that sets to 32 fps
		ThermalEventCamera(int fps); // constructor with fps argument
		virtual ~ThermalEventCamera(); // deconstructor
		// set print colors
		void setNegColor(const char* neg);
		void setPosColor(const char* pos);
		// get print colors
		const char* getNegColor(){return (const char*)this->ansi_neg_color;};
		const char* getPosColor(){return (const char*)this->ansi_pos_color;};
		void read(); // read from the I2C buff
		void update(); // update the output matrix
		void start(); // start threaded reading
		void stop(); // stop threaded reading
		int getFps(); // function to get refresh FPS
		void setFps(int nfps); // function to update refresh FPS
		void printSigns(); // print signs matrix as colors in the console
		void printFrame(); // print current frame as colors in the console
		void printSignsRaw(); // print signs matrix raw values
		bool isReadAlive(int t); // check if read thread is alive. pass wait delay in msecs
		bool isUpdateAlive(int t); // check if update thread is alive. pass wait delay in msecs
		// set the function for comparing pixel values
		// returns true if the two pixels are sufficiently different
		// c is the current pixel and p is the past pixel
		void setCompare(CompareFunc t);
		// retrieve the event timestamp
		// updated with each update call
		std::chrono::time_point<std::chrono::system_clock> getLatestTS();
		// get copy of last read data
		void getFrame(uint16_t (&cf)[834]);
		// get copy of compare flag
		bool getCompareFlag(); 
	private:
		// flag stating if the compare function has been set
		bool cmpSet = false;
		// latest timestamp generated by EventData
		std::chrono::time_point<std::chrono::system_clock> lts;
		CompareFunc compare; // function for comparing pixels from the past and current frame
		int wrapperRead(); // function passed to readThread. Loops ThermalEventCamera::read
		int wrapperUpdate(); // function passed to updateThread. Loops update
		// colors used in printSigns
		char* ansi_neg_color = (char*)(ANSI_COLOR_RED FMT_STRING ANSI_COLOR_RESET);
		char* ansi_pos_color = (char*)(ANSI_COLOR_CYAN FMT_STRING ANSI_COLOR_RESET);
		uint16_t frame[834]; // raw data read from I2C bus
		uint16_t last_frame[834]; // last frame read
		uint16_t eeMLX90640[832]; // used in getting camera parameters
		paramsMLX90640 mlx90640; // camera parameters
		//std::map<size_t,EventData> events; // map containing the change data
		ThreadSafeQueue<EventData> events;// thread safe queue for events
		int fps; // fps set for camera device
		std::future<int> readThread; // thread for asynchronous reading
		std::future<int> updateThread; // thread for updating the output
		std::atomic<bool> stopFlag {true}; // flag to stop the thread from running
		std::mutex print_mutex; // mutex to help the different threads print to cout
};
#endif
